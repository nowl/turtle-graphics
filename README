This is a Turtle Graphics simulator that takes a series of "commands"
as input and outputs a set of vectors corresponding to the path of the
turtle. This was designed to work with the L-System project
(https://github.com/nowl/l-system) and is not currently a
fully-functional turtle graphics engine.

As an example of use, take for example the expanded dragon curve of 5
iterations:

"fx+yf+fx-yf+fx+yf-fx-yf+fx+yf+fx-yf-fx+yf-fx-yf+fx+yf+fx-yf+fx+yf-fx-yf-fx+yf+fx-yf-fx+yf-fx-yf"

Using this as input to the turtle graphics engine will output the
vectors as shown below.

(defparameter *turtle* (tg:make-turtle))
(tg:reset-turtle *turtle*)
(tg:turtle-control *turtle* 
                   '(:string "fx+yf+fx-yf+fx+yf-fx-yf+fx+yf+fx-yf-fx+yf-fx-yf+fx+yf+fx-yf+fx+yf-fx-yf-fx+yf+fx-yf-fx+yf-fx-yf"
                     :angle 90 
                     :color (1.0 1.0 1.0)))

(((1.0 1.0 1.0) (0 0 0) (1.0 0.0 0.0))
 ((1.0 1.0 1.0) (1.0 0.0 0.0) (0.5519264 0.8939966 0.0))
 ((1.0 1.0 1.0) (0.5519264 0.8939966 0.0) (-0.046533465 0.09284401 0.0))
 ((1.0 1.0 1.0) (-0.046533465 0.09284401 0.0) (-0.4946071 0.9868404 0.0))
 ((1.0 1.0 1.0) (-0.4946071 0.9868404 0.0) (-1.0930668 0.1856879 0.0))
 ((1.0 1.0 1.0) (-1.0930668 0.1856879 0.0) (-0.108685195 0.009642243 0.0))
 ((1.0 1.0 1.0) (-0.108685195 0.009642243 0.0) (-0.70714486 -0.79151016 0.0))
 ((1.0 1.0 1.0) (-0.70714486 -0.79151016 0.0) (-1.1552184 0.102486074 0.0))
 ((1.0 1.0 1.0) (-1.1552184 0.102486074 0.0) (-1.7536781 -0.6986662 0.0))
 ((1.0 1.0 1.0) (-1.7536781 -0.6986662 0.0) (-0.76929665 -0.874712 0.0))
 ((1.0 1.0 1.0) (-0.76929665 -0.874712 0.0) (-1.0529877 0.084203124 0.0))
 ((1.0 1.0 1.0) (-1.0529877 0.084203124 0.0) (-0.06860638 -0.09184259 0.0))
 ((1.0 1.0 1.0) (-0.06860638 -0.09184259 0.0) (-0.667066 -0.8929947 0.0))
 ((1.0 1.0 1.0) (-0.667066 -0.8929947 0.0) (0.31731534 -1.0690405 0.0))
 ((1.0 1.0 1.0) (0.31731534 -1.0690405 0.0) (-0.28114426 -1.8701926 0.0))
 ((1.0 1.0 1.0) (-0.28114426 -1.8701926 0.0) (-0.7292175 -0.97619665 0.0))
 ((1.0 1.0 1.0) (-0.7292175 -0.97619665 0.0) (-1.3276771 -1.7773488 0.0))
 ((1.0 1.0 1.0) (-1.3276771 -1.7773488 0.0) (-0.34329593 -1.9533945 0.0))
 ((1.0 1.0 1.0) (-0.34329593 -1.9533945 0.0) (-0.62698686 -0.99447966 0.0))
 ((1.0 1.0 1.0) (-0.62698686 -0.99447966 0.0) (0.35739416 -1.1705253 0.0))
 ((1.0 1.0 1.0) (0.35739416 -1.1705253 0.0) (0.07370326 -0.21161056 0.0))
 ((1.0 1.0 1.0) (0.07370326 -0.21161056 0.0) (-0.65644884 -0.89489365 0.0))
 ((1.0 1.0 1.0) (-0.65644884 -0.89489365 0.0) (-0.9401396 0.06402099 0.0))
 ((1.0 1.0 1.0) (-0.9401396 0.06402099 0.0) (0.04424119 -0.11202484 0.0))
 ((1.0 1.0 1.0) (0.04424119 -0.11202484 0.0) (-0.5542183 -0.91317636 0.0))
 ((1.0 1.0 1.0) (-0.5542183 -0.91317636 0.0) (0.4301623 -1.0892222 0.0))
 ((1.0 1.0 1.0) (0.4301623 -1.0892222 0.0) (0.14647171 -0.13030767 0.0))
 ((1.0 1.0 1.0) (0.14647171 -0.13030767 0.0) (1.1308523 -0.30635357 0.0))
 ((1.0 1.0 1.0) (1.1308523 -0.30635357 0.0) (0.5323929 -1.107505 0.0))
 ((1.0 1.0 1.0) (0.5323929 -1.107505 0.0) (1.5167735 -1.2835507 0.0))
 ((1.0 1.0 1.0) (1.5167735 -1.2835507 0.0) (0.91831416 -2.084702 0.0))
 ((1.0 1.0 1.0) (0.91831416 -2.084702 0.0) (0.47024137 -1.1907066 0.0)))

This vector output represents color, start position, and end position
it 3d space. These vectors are subsequently fed back into the L-system
display generator to create an OpenGL representation of the L-system.
